
type Query {
    dies: DieType
}
#
# type Mutation {
# }

enum DieType {
    D2,
    D4,
    D6,
    D8,
    D10,
    D12,
    D20,
    D100
}

type DiceThrow {
    id: ID!,
    multiplier: Int!,
    type: DieType!,
    modifier: Int!
}

type Money {
    id: ID!,
    copper: Int!,
    silver: Int!,
    gold: Int!
}

# Representation of a real life person
type Player {
    id: ID!,
    name: String!,
    email: String,
    characters: [Character!]!,
    isGM: Boolean!
}

# Unit for experience
enum XPUnit {
    Level,
    Points
}

# Alignment
enum Alignment {
    LawfulGood,
    LawfulNeutral,
    LawfulEvil,
    NeutralGood,
    Neutral,
    NeutralEvil,
    ChaoticGood,
    ChaoticNeutral,
    ChaoticEvil
}

enum AbilityType {
    Strength,
    Dexterity,
    Constitution,
    Intelligence,
    Wisdom,
    Charisma
}

type Ability {
    id: ID!,
    type: AbilityType!,
    score: Int,
    modifier: Int
}

type SkillType {
    id: ID!,
    name: String!,
    keyAbility: AbilityType!
}

type Skill {
    id: ID!,
    type: SkillType!,
    proficiency: Boolean!,
	# Rogues and bards (and some special subclasses) 
	# use double proficiency bonus (expertise) on their checks
	expertise: Boolean!, 
    modifier: Int!
}

type SavingThrow {
    id: ID!,
    type: AbilityType!,
    proficiency: Boolean!,
    modifier: Int!
}

type Class {
    id: ID!,
    name: String!,
    type: String!,
    alignments: [Alignment!]!,
    hitDie: DieType!,
    fullText: String!
}

# For multiclassing purposes
type LeveledClass {
	class: Class!,
	level: Int!
}

type Health {
    id: ID!,
    maximum: Int,
    current: Int!,
    temporary: Int!
}

interface InventoryItem {
    id: ID!,
    name: String!,
    category: String!,
    weight: Int!,
    fullText: String!
}

type Item implements InventoryItem {
    id: ID!,
    name: String!,
    category: String!,
    weight: Int!,
    specialAbility: String,
    fullText: String!
}

type Equipment implements InventoryItem { # TODO Missing some fields
    id: ID!,
    name: String!,
    family: String!, # e.g. Weapons
    category: String!, # e.g. Simple Weapons
    subcategory: String!, # e.g. Ranged Weapons
    cost: Money!,
    weight: Int!,
    damage: DiceThrow,
    damageType: String,
    criticalMultiplier: Int,
    fullText: String!
}

type InventoryEntry {
    id: ID!,
    item: InventoryItem!,
    amount: Int!,
    totalWeight: Int!
}

type Spell {
    id: ID!,
    name: String!,
    school: String!,
    subschool: String!,
    level: String!,
    castingTime: String!,
    range: String!,
    duration: String!,
    description: String!,
    scaling: String! # what happens when you use a higher lvl spell slot
}

# Player controlled entity within the world
type Character {
    id: ID!,

    name: String!,
    experience(unit: XPUnit = Level): Int!,
    alignment: Alignment,


	# For multiclassing purposes
    classes: [LeveledClass!],


    proficiencyBonus: Int,
    savingThrows: [SavingThrow!]!,
    skills: [Skill!]!,
    abilities: [Ability!]!,

    armorClass: Int,
    initiative: Int,
    speed: Int,
    health: Health!,

    deathSaveSuccesses: Int!,
    deathSaveFailures: Int!,

    traits: String!,
    ideals: String!,
    bonds: String!,
    flaws: String!,

    proficiencies: String!,
    features: String!,

    age: Int!,
    height: Float!,
    weight: Int!,
    eyes: String!,
    skin: String!,
    hair: String!,

    lore: String!,

    money: Money!,
    inventory: [InventoryEntry!]!,
    spells: [Spell!]!,

    # race TBD
    # background TBD

    player: Player!
}
